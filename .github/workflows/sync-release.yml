name: Sync OlivOS Release

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  check-and-create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
      id-token: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 读取当前跟踪的上游版本
        id: read_last_version
        run: |
          if [ -f "last_release.txt" ]; then
            echo "LAST_VERSION=$(cat last_release.txt)" >> $GITHUB_ENV
          else
            echo "LAST_VERSION=0.0.0" >> $GITHUB_ENV
          fi

      - name: 获取上游最新 Release
        id: get_upstream_release
        run: |
          RESPONSE=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GH_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/OlivOS-Team/OlivOS/releases/latest")
          TAG_NAME=$(echo "$RESPONSE" | jq -r .tag_name)
          echo "UPSTREAM_TAG=$TAG_NAME" >> $GITHUB_ENV

      - name: 检查是否需要处理
        id: check_version
        run: |
          if [[ "${{ env.LAST_VERSION }}" < "${{ env.UPSTREAM_TAG }}" ]]; then
            echo "NEW_RELEASE=true" >> $GITHUB_ENV
          else
            echo "NEW_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: 处理新版本
        if: env.NEW_RELEASE == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          # 清理标签名
          CLEAN_TAG=$(echo "${{ env.UPSTREAM_TAG }}" | sed -E 's/[^a-zA-Z0-9.-]+/-/g; s/^-//; s/-+/-/g; s/-$//')

          # 创建 Release
          curl -s -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            -d '{
              "tag_name": "'"${CLEAN_TAG}"'",
              "body": "由官方项目发布 release 自动触发\n对应上游版本: ${{ env.UPSTREAM_TAG }}",
              "draft": false,
              "prerelease": false
            }'

          # 更新跟踪文件
          echo "${{ env.UPSTREAM_TAG }}" > last_release.txt
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add last_release.txt
          git commit -m "更新上游版本跟踪至 ${{ env.UPSTREAM_TAG }}"
          git push "https://${{ github.actor }}:$GH_PAT@github.com/${{ github.repository }}.git" HEAD:main --force

      - name: 触发 Docker 构建
        if: env.NEW_RELEASE == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          curl -X POST \
            -H "Authorization: Bearer $GH_PAT" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/ShiaBox/OlivOS-Docker/actions/workflows/docker-publish.yml/dispatches" \
            -d '{
              "ref": "main"
            }'
